<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Jinme - Compartiendo ideas libres]]></title>
  <link href="http://blog.jinme.org/categories/javascript/atom.xml" rel="self"/>
  <link href="http://blog.jinme.org/"/>
  <updated>2013-09-06T09:57:49-04:30</updated>
  <id>http://blog.jinme.org/</id>
  <author>
    <name><![CDATA[Jinme]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Convertir un arreglo Javascript a CSV]]></title>
    <link href="http://blog.jinme.org/2013/09/06/convertir-un-arreglo-javascript-a-csv/"/>
    <updated>2013-09-06T09:13:00-04:30</updated>
    <id>http://blog.jinme.org/2013/09/06/convertir-un-arreglo-javascript-a-csv</id>
    <content type="html"><![CDATA[<p>Los archivos <a href="http://es.wikipedia.org/wiki/CSV">CSV</a> básicamente poseen un <strong>formato abierto</strong> que permite de manera sencilla el intercambio de información organizado tabularmente. Tal como se muestra en el ejemplo.</p>

<p><code>text
987,juan,87345,10 norte 342
876,pedro,43649,8 oriente 342
123,jorge,03342,av. libertad 23
</code>
A continuación explico como <strong>convertir los datos de un arreglo</strong> a este formato.</p>

<!--more-->


<p>Primeramente mostramos la información de un arreglo usando la función <code>valueOf()</code></p>

<p>``` javascript
var frutas = [&lsquo;manzana&rsquo;, &lsquo;duraznos&rsquo;, &lsquo;naranjas&rsquo;, &lsquo;mangos&rsquo;];</p>

<p>var str = frutas.valueOf();</p>

<p>//print str: manzana,duraznos,naranjas,mangos
```
Como vemos el método convierte un arreglo javascript a un <em>string</em> usando la coma como separador, suficiente para compartirlo en un archivo CSV.</p>

<p>Ahora bien, si queremos usar el <em>pipe</em> <strong>(|)</strong> como separador, valido para el CSV; usaremos el método <code>join()</code></p>

<p>``` javascript
var frutas = [&lsquo;manzana&rsquo;, &lsquo;duraznos&rsquo;, &lsquo;naranjas&rsquo;, &lsquo;mangos&rsquo;];</p>

<p>var str = frutas.join(&ldquo;|&rdquo;);</p>

<p>//print str: manzana|duraznos|naranjas|mangos
```
<strong>¿Interesante, no?</strong> espero en el futuro ir publicando más trucos en el blog, <em>siempre necesarios.</em> Deja tus comentarios si tienes algún <em>snippet</em> en particular.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cómo saber si un objeto JSON está vacío]]></title>
    <link href="http://blog.jinme.org/2013/08/27/como-saber-si-un-objeto-json-esta-vacio/"/>
    <updated>2013-08-27T08:13:00-04:30</updated>
    <id>http://blog.jinme.org/2013/08/27/como-saber-si-un-objeto-json-esta-vacio</id>
    <content type="html"><![CDATA[<p>Hace unos días leía un <em>tuit</em> con la pregunta que inspira este artículo, no especificaba el lenguaje de programación ni nada, así que me pareció ideal <strong>agregar todos</strong> los posibles lenguajes para resolver este problema tan común. Puedes obtener la solución o colaborar con otros dando la tuya en los comentarios, por ahora les dejo la de <strong>Javascript</strong>.</p>

<!--more-->


<h2>Javascript</h2>

<p>Puedes hacer una prueba creando una variable <code>var objeto = {}</code> y llamar a la función <code>isEmptyJSON(objeto)</code></p>

<p>``` javascript</p>

<pre><code>function isEmptyJSON(obj) {
    for(var i in obj) { return false; }
    return true;
}
</code></pre>

<p>```</p>

<h3>jQuery</h3>

<p>Si trabajas con <a href="http://jquery.com/">jQuery</a>, esta librería tiene la función <code>jQuery.isEmptyObject(objeto)</code> que puedes utilizar.</p>

<p>Recuerda que si tienes la solución en algún lenguaje de tu interés o la necesitas, <strong>deja tus comentarios</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Realizando vectores SVG con Javascript en 3 pasos]]></title>
    <link href="http://blog.jinme.org/2013/08/26/vectores-svg-en-3-pasos-con-javascript/"/>
    <updated>2013-08-26T08:42:00-04:30</updated>
    <id>http://blog.jinme.org/2013/08/26/vectores-svg-en-3-pasos-con-javascript</id>
    <content type="html"><![CDATA[<p>Algo que parecía imposible hace años era el uso de gráficos vectoriales o <a href="http://es.wikipedia.org/wiki/Scalable_Vector_Graphics">SVG</a> en el navegador. <strong>Hoy la historia es otra</strong>, sin embargo realizarlos pudiera resultar difícil al principio, <strong>hasta ahora</strong>. Y te lo explico en <strong>tres pasos</strong>.</p>

<!--more-->


<p><a href="http://raphaeljs.com/">Raphaël</a> es <em>una joya</em>, una pequeña librería en Javascript que simplifica trabajar con gráficos vectoriales en la web. Si deseas crear tu propio gráfico de barras, cortar una imagen o rotar un <em>widget</em> puedes hacerlo simple y fácilmente con esta librería.</p>

<ol>
<li>Bájate el pequeño archivo de <strong>31 Kb</strong> <a href="http://github.com/DmitryBaranovskiy/raphael/raw/master/raphael-min.js">acá</a></li>
<li>Incluye el <em>script</em> <code>raphael-min.js</code> en cualquier parte de tu archivo HTML</li>
<li>Finalmente incluyes el código en javascript para realizar tu gráfico vectorial, aquí crearemos un simple circulo que quedaria como sigue.</li>
</ol>


<p>``` javascript</p>

<script src="raphael-min.js" type="text/javascript" charset="utf-8"></script>


<script type="text/javascript" charset="utf-8">

// Crea el canvas canvas (contenedor) de tamaño 320 × 200 en las coordenadas 10, 50
var paper = Raphael(10, 50, 320, 200);

// Crea un circulo en las coordenadas x = 50, y = 40, con radio 10
var circle = paper.circle(50, 40, 10);

// Configura el atributo de relleno del circulo a rojo (#f00)
circle.attr("fill", "#f00");

// Asignamos el atributo exterior del circulo a blanco
circle.attr("stroke", "#fff");

</script>


<p>```</p>

<p><strong>Pruebalo.</strong> Como veras es un proceso muy sencillo para crear gráficos SVG, claro está que tiene infinidad de elementos que puedes realizar, todos <a href="http://raphaeljs.com/reference.html">documentados</a> y hasta con variados <strong>ejemplos</strong> que puedes utilizar.</p>

<p>Para finalizar les indico que esta útil librería soporta Firefox 3.0+, Safari 3.0+, Chrome 5.0+, Opera 9.5+ y hasta Internet Explorer 6.0+</p>

<p><strong>La imaginación es el limite!</strong></p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: crunchbang | Jinme - Compartiendo ideas libres]]></title>
  <link href="http://blog.jinme.org/categories/crunchbang/atom.xml" rel="self"/>
  <link href="http://blog.jinme.org/"/>
  <updated>2013-09-21T09:30:32-04:30</updated>
  <id>http://blog.jinme.org/</id>
  <author>
    <name><![CDATA[Jinme]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Evitar y borrar el archivo libpeerconnection.log que crea Google Chrome]]></title>
    <link href="http://blog.jinme.org/2013/09/12/evitar-y-borrar-el-archivo-libpeerconnection-dot-log-que-crea-google-chrome/"/>
    <updated>2013-09-12T10:08:00-04:30</updated>
    <id>http://blog.jinme.org/2013/09/12/evitar-y-borrar-el-archivo-libpeerconnection-dot-log-que-crea-google-chrome</id>
    <content type="html"><![CDATA[<p>Hace unos días me percaté de un archivo <em>fantasma:</em> <code>libpeerconnection.log</code> que aparece en distintos directorios del disco duro donde tengo instalado Crunchbang, si lo borras vuelve a aparecer sobre todo en el $HOME. Investigando di con el <strong>culpable: Google Chrome</strong>. Acá te dejo la solución.</p>

<!--more-->


<p>Lo primero es abrir la consola <em>(o terminal)</em> del sistema y ejecutar <code>sudo nano /opt/google/chrome/google-chrome</code> o usar tu editor favorito: gedit, geany, vi <em>(sustituyendo a nano)</em>. Luego nos vamos al final del archivo que estamos editando, donde están las siguientes lineas:</p>

<p>``` bash
export CHROME_VERSION_EXTRA=&ldquo;stable&rdquo;</p>

<h1>We don&rsquo;t want bug-buddy intercepting our crashes. <a href="http://crbug.com/24120">http://crbug.com/24120</a></h1>

<p>export GNOME_DISABLE_CRASH_DIALOG=SET_BY_GOOGLE_CHROME</p>

<p>exec -a &ldquo;$0&rdquo; &ldquo;$HERE/chrome&rdquo;  &ldquo;$@&rdquo;
```</p>

<p>Antes del comando <code>exec</code> escribimos <code>cd /tmp</code>, con lo cual Chrome creará en adelante el archivo en el directorio temporal de nuestra distribución. Quedaría algo como esto:</p>

<p>``` bash
export CHROME_VERSION_EXTRA=&ldquo;stable&rdquo;</p>

<h1>We don&rsquo;t want bug-buddy intercepting our crashes. <a href="http://crbug.com/24120">http://crbug.com/24120</a></h1>

<p>export GNOME_DISABLE_CRASH_DIALOG=SET_BY_GOOGLE_CHROME</p>

<p>cd /tmp
exec -a &ldquo;$0&rdquo; &ldquo;$HERE/chrome&rdquo;  &ldquo;$@&rdquo;
```</p>

<p>Guardas el archivo <code>Ctrl + O</code>. Luego si deseas borrar todos estos archivos &ldquo;fantasmas&rdquo; en tu disco duro, lo puedes hacer con el siguiente <em>comando</em> en la consola.</p>

<p><code>bash
sudo find -name libpeerconnection.log -exec rm -f {} \;
</code></p>

<p>Con esto me pude librar de esta molestia, espero que tu también. <strong>No olvides dejar tus comentarios.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Instalando y configurando Octopress]]></title>
    <link href="http://blog.jinme.org/2013/08/19/instalando-y-configurando-octopress/"/>
    <updated>2013-08-19T11:07:00-04:30</updated>
    <id>http://blog.jinme.org/2013/08/19/instalando-y-configurando-octopress</id>
    <content type="html"><![CDATA[<p>Luego de años sin blog, debido a la perdida de <a href="http://matandotigres.wordpress.com">MatandoTigres</a> he decidido retornar con un espacio renovado.
Esta semana, intentando abordar excelentes lenguajes como Ruby y <em>auto-obligado</em> a usar Git he decidido montar este nuevo Blog en <a href="https://github.com/">Github</a> usando una excelente herramienta desarrollada en Software Libre llamada <a href="http://octopress.org/">Octopress</a>.
Que mejor manera de comenzar explicando como instalar y configurar Octopress, un <em>framework de blogging para hackers</em>.
<strong>Manos a la obra entonces!</strong></p>

<!--more-->


<h2>Instalación</h2>

<p>Aclaro que todo el procedimiento lo realicé con la distribución <a href="http://crunchbang.org/">Crunchbang</a> por lo cual debería funcionar con cualquiera basada en <strong>Debian</strong>.
Simplemente debemos usar la consola <em>(terminal)</em> para ejecutar ciertos comandos.</p>

<p>Lo primero es instalar Git.
<code>bash
$ sudo aptitude install git
</code></p>

<p>También debemos tener instalado Ruby, para ello usaremos <strong>RVM (Ruby Version Manager)</strong> que me parece el más completo y a <em>prueba-de-fallos</em>, lo bajamos como sigue.
<code>bash
$ curl -L https://get.rvm.io | bash -s stable --ruby
</code></p>

<p>Luego instalaremos específicamente la <strong>versión 1.9.3</strong> de Ruby, que es la que <em>exige</em> Octopress.
<code>bash
$ rvm install 1.9.3
$ rvm use 1.9.3
$ rvm rubygems latest
</code>
<strong>Ejecuta</strong> <code>ruby --version</code> para asegurarte que estas usando la versión Ruby 1.9.3.</p>

<p>Lo siguiente es hacer un <em>fork</em> de Octopress en nuestro computador.
<code>bash
$ git clone git://github.com/imathis/octopress.git octopress
$ cd octopress
</code></p>

<p>Para finalizar la instalación instalamos las dependencias
<code>bash
$ gem install bundler
$ rbenv rehash
$ bundle install
</code>
E instalamos el tema por defecto. <strong>Sí,</strong> Octopress tiene variados temas para usar.</p>

<p><code>bash
$ rake install
</code></p>

<h2>Configuración</h2>

<p>Aunque no lo crean, llegamos a la <strong>parte fácil</strong>, configurar Octopress solo requiere editar el archivo <code>_config.yml</code> que se encuentra en la raíz del directorio del framework.
Acá ud puede cambiar el <code>url</code>, <code>title</code>, <code>subtitle</code>, <code>permalink</code>, <code>twitter_account</code> e incluso comentarios vía <a href="http://disqus.com/">disqus</a> provista por <code>disqus_short_name</code>.
Les dejo una breve descripción (en español) de algunas variables.
<code>bash
url:                # Dirección URL para reescritura de RSS, etc
title:              # Usado en la cabecera y las etiquetas de titulo
subtitle:           # Descripción usada en la cabecera del sitio
author:             # Tu nombre, para RSS, Copyright, Metadata
simple_search:      # Buscador utilizado para realizar las busquedas (claro!)
description:        # Una meta-descripción de tu blog, para indexar el sitio
date_format:        # Formato de fecha usado por la función strftime de Ruby
subscribe_rss:      # Dirección URL para los feeds del blog, por defecto usa /atom.xml
subscribe_email:    # Dirección URL para suscribir por correo electrónico (requiere el servicio)
category_feeds:     # Habilita los feeds RSS por categoria (por defecto está desactivado)
email:              # Correo electrónico para los feeds del RSS, si lo deseas.
</code>
<strong>Eso es todo amigos.</strong> Para finalizar solo me queda indicarles que existen muchos <em>plugins</em> de <a href="http://octopress.org/docs/blogging/plugins/">terceros</a> para usar con este poderoso framework, solo queda instalar y probar.
Seguramente en próximos artículos estaré escribiendo sobre éste y otros temas relacionados. Espero por lo pronto que te haya sido útil el breve tutorial y <strong>comiences con tu blog</strong>!</p>
]]></content>
  </entry>
  
</feed>
